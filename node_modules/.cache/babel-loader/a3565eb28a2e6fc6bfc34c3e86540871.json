{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport config from \"../config/config\";\nimport * as types from \"./types\";\nimport { NotificationManager } from \"react-notifications\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  dispatch(setUserLoading(true));\n  axios.request({\n    url: \"/api/users/register\",\n    baseURL: config.apiBaseUrl,\n    method: \"post\",\n    data: userData\n  }).then(response => {\n    const token = response.data.token;\n    localStorage.setItem(\"jwtToken\", token);\n    setAuthToken(token);\n    const decoded = jwt_decode(token);\n    dispatch(setCurrentUser(decoded));\n    console.log(\"registerResult\", response.data);\n    history.push(\"/dashboard\");\n  }).catch(err => {\n    console.log(\"err\", err); // dispatch({\n    //   type: types.GET_ERRORS,\n    //   payload: err.response.data\n    // });\n\n    if (err.response.data.title === \"Email\") {\n      NotificationManager.error(\"Email already exist\");\n    }\n\n    dispatch(setUserLoading(false));\n  });\n}; // Login - get user token\n\nexport const loginUser = (userData, history) => dispatch => {\n  dispatch(setUserLoading(true));\n  axios.request({\n    url: \"/api/users/login\",\n    baseURL: config.apiBaseUrl,\n    method: \"post\",\n    data: userData\n  }).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const token = res.data.token;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n    dispatch(setUserLoading(false));\n    history.push(\"/dashboard\");\n  }).catch(err => {\n    try {\n      if (err.response.data.title === \"Email\") {\n        NotificationManager.error(\"Email not found\");\n      }\n\n      if (err.response.data.title === \"Password\") {\n        NotificationManager.error(\"Password incorrect\");\n      }\n    } catch (err) {\n      NotificationManager.error(\"Server error\");\n    }\n\n    dispatch(setUserLoading(false));\n  });\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  console.log(\"decode\", decoded);\n  return {\n    type: types.SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = val => {\n  return {\n    type: types.USER_LOADING,\n    payload: val\n  };\n}; // Log user out\n\nexport const logoutUser = history => dispatch => {\n  console.log(\"logout123: \");\n  axios.request({\n    url: \"/api/users/logout\",\n    baseURL: config.apiBaseUrl,\n    method: \"post\"\n  }).then(res => {\n    console.log(\"logoutssss: \", res);\n    localStorage.removeItem(\"jwtToken\");\n    setAuthToken(false);\n    dispatch(setCurrentUser({}));\n    dispatch(setUserLoading(false));\n    history.push(\"/\");\n  }).catch(err => {\n    console.log(\"logoutError: \", err);\n    dispatch(setUserLoading(false));\n    let errStatus = err.response.status;\n\n    if (errStatus === 401) {\n      localStorage.removeItem(\"jwtToken\");\n      setAuthToken(false);\n      dispatch(setCurrentUser({}));\n      history.push(\"/\");\n    } else {// dispatch({\n      //   type: types.GET_ERRORS,\n      //   payload: err.response.data\n      // });\n    }\n  });\n};","map":{"version":3,"sources":["F:/React/upwork/test/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","config","types","NotificationManager","registerUser","userData","history","dispatch","setUserLoading","request","url","baseURL","apiBaseUrl","method","data","then","response","token","localStorage","setItem","decoded","setCurrentUser","console","log","push","catch","err","title","error","loginUser","res","type","SET_CURRENT_USER","payload","val","USER_LOADING","logoutUser","removeItem","errStatus","status"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport config from \"../config/config\";\r\n\r\nimport * as types from \"./types\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\n// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  dispatch(setUserLoading(true));\r\n  axios\r\n    .request({\r\n      url: \"/api/users/register\",\r\n      baseURL: config.apiBaseUrl,\r\n      method: \"post\",\r\n      data: userData\r\n    })\r\n    .then(response => {\r\n      const { token } = response.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      setAuthToken(token);\r\n      const decoded = jwt_decode(token);\r\n      dispatch(setCurrentUser(decoded));\r\n      console.log(\"registerResult\", response.data);\r\n      history.push(\"/dashboard\");\r\n    })\r\n    .catch(err => {\r\n      console.log(\"err\", err);\r\n      // dispatch({\r\n      //   type: types.GET_ERRORS,\r\n      //   payload: err.response.data\r\n      // });\r\n      if (err.response.data.title === \"Email\") {\r\n        NotificationManager.error(\"Email already exist\");\r\n      }\r\n      dispatch(setUserLoading(false));\r\n    });\r\n};\r\n\r\n// Login - get user token\r\nexport const loginUser = (userData, history) => dispatch => {\r\n  dispatch(setUserLoading(true));\r\n  axios\r\n    .request({\r\n      url: \"/api/users/login\",\r\n      baseURL: config.apiBaseUrl,\r\n      method: \"post\",\r\n      data: userData\r\n    })\r\n    .then(res => {\r\n      // Save to localStorage\r\n      // Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n      dispatch(setUserLoading(false));\r\n      history.push(\"/dashboard\");\r\n    })\r\n    .catch(err => {\r\n      try {\r\n        if (err.response.data.title === \"Email\") {\r\n          NotificationManager.error(\"Email not found\");\r\n        }\r\n        if (err.response.data.title === \"Password\") {\r\n          NotificationManager.error(\"Password incorrect\");\r\n        }\r\n      } catch (err) {\r\n        NotificationManager.error(\"Server error\");\r\n      }\r\n      dispatch(setUserLoading(false));\r\n    });\r\n};\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n  console.log(\"decode\", decoded);\r\n  return {\r\n    type: types.SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};\r\n// User loading\r\nexport const setUserLoading = val => {\r\n  return {\r\n    type: types.USER_LOADING,\r\n    payload: val\r\n  };\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = history => dispatch => {\r\n  console.log(\"logout123: \");\r\n  axios\r\n    .request({\r\n      url: \"/api/users/logout\",\r\n      baseURL: config.apiBaseUrl,\r\n      method: \"post\"\r\n    })\r\n    .then(res => {\r\n      console.log(\"logoutssss: \", res);\r\n      localStorage.removeItem(\"jwtToken\");\r\n      setAuthToken(false);\r\n      dispatch(setCurrentUser({}));\r\n      dispatch(setUserLoading(false));\r\n      history.push(\"/\");\r\n    })\r\n    .catch(err => {\r\n      console.log(\"logoutError: \", err);\r\n      dispatch(setUserLoading(false));\r\n      let errStatus = err.response.status;\r\n      if (errStatus === 401) {\r\n        localStorage.removeItem(\"jwtToken\");\r\n        setAuthToken(false);\r\n        dispatch(setCurrentUser({}));\r\n        history.push(\"/\");\r\n      } else {\r\n        // dispatch({\r\n        //   type: types.GET_ERRORS,\r\n        //   payload: err.response.data\r\n        // });\r\n      }\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}